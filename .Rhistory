# $Id: cokriging.R,v 1.4 2006-02-10 19:05:02 edzer Exp $
library(sp)
# $Id: cokriging.R,v 1.4 2006-02-10 19:05:02 edzer Exp $
library(sp)
library(gstat)
library(rgdal)
# primary data
data_tomtom <- read.csv("data/d04_tomtom.csv", T)
class(data_tomtom)
coordinates(data_tomtom) = ~x+y
# secondary data
data_pems <- read.csv("data/d04_pems.csv", T)
class(data_pems)
coordinates(data_pems) = ~x+y
meuse.grid
data(meuse.grid)
meuse.grid
library(lattice)
xyplot(y~x, meuse.grid, asp="iso", pch="+")
xyplot(y~x, meuse, asp="iso", pch="+")
data(meuse)
coordinates(meuse) = ~x+y
xyplot(y~x, meuse, asp="iso", pch="+")
install.packages("mapview")
# $Id: cokriging.R,v 1.4 2006-02-10 19:05:02 edzer Exp $
library(sp)
library(gstat)
library(rgdal)
library(lattice)
library(mapview)
# primary data
data_tomtom <- read.csv("data/d04_tomtom.csv", T)
class(data_tomtom)
coordinates(data_tomtom) = ~x+y
proj4string(data_tomtom) <- CRS("+init=epsg:7131")
mapview(data_tomtom)
# secondary data
data_pems <- read.csv("data/d04_pems.csv", T)
min(data_pems$Latitude)
# Set the origin
minx <- min(minx_tomtom, minx_pems)
miny <- min(miny_tomtom, miny_pems)
# $Id: cokriging.R,v 1.4 2006-02-10 19:05:02 edzer Exp $
library(sp)
library(gstat)
library(rgdal)
library(lattice)
# primary data
data_tomtom <- read.csv("data/d04_tomtom.csv", T)
class(data_tomtom)
coordinates(data_tomtom) = ~x+y
proj4string(data_tomtom) <- CRS("+init=epsg:7131")
minx_tomtom <- min(data_tomtom$x)
miny_tomtom <- min(data_tomtom$y)
# secondary data
data_pems <- read.csv("data/d04_pems.csv", T)
class(data_pems)
coordinates(data_pems) = ~x+y
proj4string(data_pems) <- CRS("+init=epsg:7131")
minx_pems <- min(data_pems$x)
miny_pems <- min(data_pems$y)
# Set the origin
minx <- min(minx_tomtom, minx_pems)
miny <- min(miny_tomtom, miny_pems)
ori <- SpatialPoints(cbind(minx, miny), proj4string =  CRS("+init=epsg:7131"))
coordinates(ori)
# primary data
data_tomtom <- as.integer(read.csv("data/d04_tomtom.csv", T))
x_ori <- round(coordinates(ori_t)[1, 1]/100) * 100
x_ori <- round(coordinates(ori)[1, 1]/100) * 100
y_ori <- round(coordinates(ori)[1, 2]/100) * 100
x_ori
y_ori
# Define how many cells for x and y axis
x_cell <- 250
y_cell <- 200
# Create the extent
ext <- extent(x_ori, x_ori + (x_cell * cell_size), y_ori, y_ori + (y_cell * cell_size))
library(raster)
# Create the extent
ext <- extent(x_ori, x_ori + (x_cell * cell_size), y_ori, y_ori + (y_cell * cell_size))
# Define the resolution to be 1000 meters
cell_size <- 1000
# Create the extent
ext <- extent(x_ori, x_ori + (x_cell * cell_size), y_ori, y_ori + (y_cell * cell_size))
library(sp)
library(gstat)
library(rgdal)
library(lattice)
library(raster)
data_tomtom <- read.csv("data/d04_tomtom.csv", T)
class(data_tomtom)
coordinates(data_tomtom) = ~x+y
proj4string(data_tomtom) <- CRS("+init=epsg:7131")
minx_tomtom <- min(data_tomtom$x)
miny_tomtom <- min(data_tomtom$y)
# secondary data
data_pems <- read.csv("data/d04_pems.csv", T)
class(data_pems)
coordinates(data_pems) = ~x+y
proj4string(data_pems) <- CRS("+init=epsg:7131")
minx_pems <- min(data_pems$x)
miny_pems <- min(data_pems$y)
# Set the origin
minx <- min(minx_tomtom, minx_pems)
miny <- min(miny_tomtom, miny_pems)
ori <- SpatialPoints(cbind(minx, miny), proj4string =  CRS("+init=epsg:7131"))
coordinates(ori)
x_ori <- round(coordinates(ori)[1, 1]/100) * 100
y_ori <- round(coordinates(ori)[1, 2]/100) * 100
# Define how many cells for x and y axis
x_cell <- 250
y_cell <- 200
# Define the resolution to be 1000 meters
cell_size <- 1000
# Create the extent
ext <- extent(x_ori, x_ori + (x_cell * cell_size), y_ori, y_ori + (y_cell * cell_size))
# Initialize a raster layer
ras <- raster(ext)
# Set the resolution to be
res(ras) <- c(cell_size, cell_size)
ras[] <- 0
# Project the raster
projection(ras) <- CRS("+init=epsg:7131")
# Convert to spatial pixel
st_grid <- rasterToPoints(ras, spatial = TRUE)
gridded(st_grid) <- TRUE
st_grid <- as(st_grid, "SpatialPixels")
xyplot(y~x, st_grid, asp="iso", pch="+")
gridded(st_grid) <- ~x+y
gridded(st_grid) = ~x+y
# Convert to spatial pixel
st_grid <- readRaster("d04_ras1.tif", asInteger = TRUE)
# Convert to spatial pixel
st_grid <- raster("d04_ras1.tif")
# Convert to spatial pixel
f <- system.file("d04_ras1.tif", package="raster")
st_grid <- raster(f)
class(st_grid)
# Read grid
f <- system.file("d04_ras1.tif", package="raster")
st_grid <- raster(f)
# Read grid
f <- system.file("data/d04_ras1.tif", package="raster")
st_grid <- raster(f)
library(sp)
library(gstat)
library(rgdal)
library(lattice)
library(raster)
# primary data
data_tomtom <- read.csv("data/d04_tomtom.csv", T)
class(data_tomtom)
coordinates(data_tomtom) = ~x+y
proj4string(data_tomtom) <- CRS("+init=epsg:7131")
minx_tomtom <- min(data_tomtom$x)
miny_tomtom <- min(data_tomtom$y)
# secondary data
data_pems <- read.csv("data/d04_pems.csv", T)
class(data_pems)
coordinates(data_pems) = ~x+y
proj4string(data_pems) <- CRS("+init=epsg:7131")
minx_pems <- min(data_pems$x)
miny_pems <- min(data_pems$y)
# Read grid
f <- system.file("data/d04_ras1.tif", package="raster")
st_grid <- raster(f)
# Read grid
st_grid <- raster("data/d04_ras1.tif")
class(st_grid)
gridded(st_grid) <- TRUE
st_grid <- as(st_grid, "SpatialPixels")
class(st_grid)
xyplot(y~x, st_grid, asp="iso", pch="+")
st_grid
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
gridded(meuse.grid) = ~x+y
meuse.grid
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=log(currentSpeed)~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", log(Avg_Speed)~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=currentSpeed~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", Avg_Speed~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
projection(ras) <- CRS("+init=epsg:7131")
projection(st_grid) <- CRS("+init=epsg:7131")
class(st_grid)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=currentSpeed~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", Avg_Speed~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
summary(is.na(data_tomtom$currentSpeed))
summary(is.na(data_pems$Avg_Speed))
data_pems <- na.omit(object = data_pems)
coordinates(data_pems) = ~x+y
proj4string(data_pems) <- CRS("+init=epsg:7131")
minx_pems <- min(data_pems$x)
miny_pems <- min(data_pems$y)
# Read grid
st_grid <- raster("data/d04_ras1.tif")
st_grid <- as(st_grid, "SpatialPixels")
projection(st_grid) <- CRS("+init=epsg:7131")
class(st_grid)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=currentSpeed~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", Avg_Speed~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
summary(is.na(data_pems$Avg_Speed))
data_pems <- data_pems[!is.na(data_pems$Avg_Speed),]
coordinates(data_pems) = ~x+y
proj4string(data_pems) <- CRS("+init=epsg:7131")
minx_pems <- min(data_pems$x)
miny_pems <- min(data_pems$y)
# Read grid
st_grid <- raster("data/d04_ras1.tif")
st_grid <- as(st_grid, "SpatialPixels")
projection(st_grid) <- CRS("+init=epsg:7131")
class(st_grid)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=currentSpeed~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", Avg_Speed~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
traffic.fit = fit.lmc(x, traffic.g)
plot(x)
traffic.g <- gstat(traffic.g, model = vgm("Sph"), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=currentSpeed~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", Avg_Speed~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
traffic.fit = fit.lmc(x, traffic.g)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 5)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 1)
plot(x, model = traffic.fit)
z <- predict(meuse.fit, newdata = meuse.grid)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 2)
plot(x, model = traffic.fit)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 3)
plot(x, model = traffic.fit)
z <- predict(meuse.fit, newdata = meuse.grid)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 4)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 6)
plot(x, model = traffic.fit)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 2)
plot(x, model = traffic.fit)
# cokriging of the four heavy metal variables
meuse.g <- gstat(id = "zn", formula=log(zinc)~1, data=meuse, nmax=10, set=list(nocheck = 1))
meuse.g <- gstat(meuse.g, "cu", log(copper)~1, meuse, nmax = 10, set=list(nocheck = 1))
meuse.g <- gstat(meuse.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(meuse.g, cutoff=1000)
meuse.fit = fit.lmc(x, meuse.g)
plot(x, model = meuse.fit)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=currentSpeed~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", Avg_Speed~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 2)
plot(x, model = traffic.fit)
library(sp)
library(gstat)
library(rgdal)
library(lattice)
library(raster)
# primary data
data_tomtom <- read.csv("data/d04_tomtom.csv", T)
class(data_tomtom)
coordinates(data_tomtom) = ~x+y
proj4string(data_tomtom) <- CRS("+init=epsg:7131")
minx_tomtom <- min(data_tomtom$x)
miny_tomtom <- min(data_tomtom$y)
# secondary data
data_pems <- read.csv("data/d04_pems.csv", T)
class(data_pems)
data_pems <- data_pems[!is.na(data_pems$Avg_Speed),]
coordinates(data_pems) = ~x+y
proj4string(data_pems) <- CRS("+init=epsg:7131")
minx_pems <- min(data_pems$x)
miny_pems <- min(data_pems$y)
# Read grid
st_grid <- raster("data/d04_ras1.tif")
st_grid <- as(st_grid, "SpatialPixels")
projection(st_grid) <- CRS("+init=epsg:7131")
class(st_grid)
# cokriging of two variables
traffic.g <- gstat(id = "tomtom", formula=log(currentSpeed)~1, data=data_tomtom, nmax=10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, "pems", log(Avg_Speed)~1, data_pems, nmax = 10, set=list(nocheck = 1))
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 2)
plot(x, model = traffic.fit)
z <- predict(meuse.fit, newdata = meuse.grid)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 1)
plot(x, model = traffic.fit)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 7)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 6)
plot(x, model = traffic.fit)
traffic.g <- gstat(traffic.g, model = vgm(1, "Sph", 900, 1), fill.all=T, set = list(nocheck = 1))
x <- variogram(traffic.g, cutoff=1000)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 5)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 4)
traffic.fit = fit.lmc(x, traffic.g, fit.method = 2)
plot(x, model = traffic.fit)
z <- predict(meuse.fit, newdata = meuse.grid)
